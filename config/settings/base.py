"""
Django settings for insurance project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

import dj_database_url
from django.core.exceptions import ImproperlyConfigured


def get_environment_variable(var_name, default_value=None):
    value = os.getenv(var_name, default_value)
    if value is None:
        error_msg = "Set the {0} environment variable".format(var_name)
        raise ImproperlyConfigured(error_msg)
    return value


def get_boolean_env_value(environment_value, default_value=None):
    raw_value = get_environment_variable(
        environment_value, default_value=str(default_value)
    )
    return True if raw_value.lower() in ("true", "1") else False


def get_int_env_value(environment_value, default_value=None):
    raw_value = get_environment_variable(
        environment_value, default_value=str(default_value)
    )
    return int(raw_value)


def get_list_env_value(environment_value, separator=":", default_value=None):
    raw_value = get_environment_variable(
        environment_value, default_value=default_value
    )
    return [item for item in raw_value.split(separator) if item != ""]


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_environment_variable(
    "DJANGO_SECRET_KEY",
    default_value="6%!b(%^m2w_*##kucs%!b(%m2w_*##k)56%!b()i@0_(%^m2w_",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_boolean_env_value("DJANGO_DEBUG", True)

ALLOWED_HOSTS = get_list_env_value(
    "DJANGO_ALLOWED_HOSTS", separator=" ", default_value="*"
)


# Application definition

INSTALLED_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "risk_model_api.apps.RiskModelApiConfig",
    "rest_framework",
    "rest_framework_swagger",
    "corsheaders",
)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["web-app/dist"],  # vue build
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# Must be a postgres DB
DATABASES = {
    "default": dj_database_url.parse(
        get_environment_variable(
            "DJANGO_DATABASE_URL", default_value="sqlite:///db.sqlite3"
        )
    )
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"
    },
]

SWAGGER_SETTINGS = {"JSON_EDITOR": True}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATICFILES_DIRS = [os.path.join(BASE_DIR, "web-app/dist")]

# add webapp url to cors whitelist
CORS_ORIGIN_WHITELIST = get_list_env_value(
    "CORS_ORIGIN_WHITELIST", separator=" ", default_value="127.0.0.1:8080"
)

FIELD_MAX_LENGTH = get_int_env_value("FIELD_MAX_LENGTH", default_value=1000)
